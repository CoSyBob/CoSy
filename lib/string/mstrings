| mstrings
| vim: ft=reva :
| 
| The mstring portion of the string utilities discussed in Reva's Forums.  rdm 2/2007 

push~
~strings 

| --- utilities, mvalue primitives

: dup>r 	inline{ 50 } ;inline	
: msize  	inline{ 8B 00 } ;inline 
: mstart	inline{ 8D 40 04  } ;inline
: c-- 		inline{ FE 08 AD } ;inline  	

: mend 	inline{ 8B 08 E3 05 01 C8 83 C0 02 40 } ; 
: underswap inline{  8B 5E 04 8B 0E 89 1E 89 4E 04 } ; 
: count inline{ 8D 76 FC 0F B6 18 40 89 06 89 D8  } ;
alias: mcount lcount

: xt>class  xt>name drop 1- 2 cells - >class ;
: >value  over xt>class [ ' 'value ] literal swap ! swap ! ;
: val ; | this only has meaning for Reva 6.07, here it is a noop
: toval	 swap ! ;
: mvalue align here value ; 

defer filterfunction   ' false is filterfunction  
: mfree cell- dup @ over @ toval free ;

| =============================================================================
| ========================= needed for mstring code ===========================
| =============================================================================
: zipwith ( a1 n1 a2 n2 xt -- )
	inline{ 89 C3 8B 4E 0C 8B 56 04 8D 76 FC 0F B6 01 89 06 
 	0F B6 02 52 51 53 50 FF D3 8D 76 F8 58 5B 59 5A 
 	8B 46 04 48 74 10 89 46 04 8B 46 0C 48 74 07 89 
 	46 0C 41 42 EB D5 8D 76 14 AD } ;           
: zipwith> ( a1 n1  a2 n2  xt -- )
	inline{ 89 C3 8B 4E 0C 03 4E 08 8B 56 04 03 16 8D 76 FC 
		49 4A 0F B6 01 89 06 0F B6 02 52 51 53 50 FF D3 
 		8D 76 F8 58 5B 59 5A 8B 46 04 48 74 0E 89 46 04 
 		8B 46 0C 48 74 05 89 46 0C EB D5 8D 76 14 AD } ;
: >zipwith> ( a1 n1  a2 n2  xt -- )
	inline{ 89 C3 8B 4E 0C 8B 56 04 03 16 8D 76 FC 4A 0F B6 
		01 89 06 0F B6 02 52 51 53 50 FF D3 8D 76 F8 58 
		5B 59 5A 8B 46 04 48 74 0F 89 46 04 8B 46 0C 48 
		74 06 89 46 0C 41 EB D5 8D 76 14 AD } ;
: touchwith ( a1 n1  a2 n2  xt -- )
	inline{ 89 C3 8B 4E 0C 8B 56 04 8D 76 FC 89 0E 89 D0 52 
		 51 53 50 FF D3 8D 76 F8 58 5B 59 5A 8B 46 04 48 
		 74 10 89 46 04 8B 46 0C 48 74 07 89 46 0C 41 42 
		 EB D9 8D 76 14 AD } ;
: touchwith> ( a1 n1  a2 n2  xt -- )
	inline{ 89 C3 8B 4E 0C 03 4E 08 8B 56 04 03 16 8D 76 FC 
		49 4A 89 0E 89 D0 52 51 53 50 FF D3 8D 76 F8 58 
	 	5B 59 5A 8B 46 04 48 74 0E 89 46 04 8B 46 0C 48 
		74 05 89 46 0C EB D9 8D 76 14 AD } ;
: >touchwith> ( a1 n1  a2 n2 xt -- )
	inline{ 89 C3 8B 4E 0C 8B 56 04 03 16 8D 76 FC 4A 74 26 
		89 0E 89 D0 52 51 53 50 FF D3 8D 76 F8 58 5B 59 
		5A 8B 46 04 48 74 0F 89 46 04 8B 46 0C 48 74 06 
		89 46 0C 41 EB D7 8D 76 14 AD } ;
: reverse inline{ 8B 3E 89 C1 01 F8 48 D1 E9 0F B6 18 0F B6 17 88 
	10 88 1F 47 48 E2 F2 8D 76 04 AD } ;
alias: \string - 
: dice 	over - >r underswap + nip r> ;
: un/char inline{ 89 C3 8B 06 8D 76 04 89 C1 E3 14 8B 3E 38 1F 75 03 47 
	E2 F9 38 1F 74 07 E3 05 89 C8 89 3E C3 31 C0 89 06 } ;
: un\char inline{ 89 C3 8B 06 8D 76 04 89 C1 E3 18 8B 3E 01 CF 4F 38 1F 75 05 
	4F E2 F9 E3 0A 38 1F 74 06 29 C8 40 89 3E C3 31 C0 89 06 C3 } ;
: append 2swap here place here +place here count ;
alias: cat append

| =============================================================================
| ========================= mstring code ======================================
| =============================================================================

: (mstr)  2 cells + 1+ dup -rot allocate ; 
: (>mstr)  dup>r 2 cells + rot 2 cells - move r> ;
: (>mstr>)  dup>r 2 cells + rot 2 cells - cmove> r> ;
: >mstr  (mstr) (>mstr) ;
: >mstr>  (mstr) (>mstr>) ;

alias: lappend +lplace  
: lprepend  dup>r lcount over 3 pick + swap 1+ cmove> r@ mstart swap dup>r move r> r> +! ;
alias: lsuffix c+lplace 
: lprefix  dup>r lcount over 1+  swap  1+ cmove>  r@ mstart c! r> ++ ;         
: linsert  dup>r mstart + zcount 1+ over dup>r 1+ swap 1+ cmove> r> c! r> ++  ;
: linsert> dup>r mend 1+ swap - zcount over dup>r 1+ swap 1+ cmove> r> c! r> ++  ;
: mpeek  mstart + c@ ;
: mpeek>   mend swap - c@ ;
: mpoke  mcount	drop + c! ;
: mpoke>   mcount 1-  +	swap -	c! ;
: ltake  2dup mpeek >r dup>r mstart + dup 1+ dup zcount nip rot swap move r> -- r> ;
: ltake>  2dup mpeek> >r dup>r mend swap 1- - dup 1- zcount move r> c-- r> ;
: lstuff rot dup>r over +! r@ -rot 2dup + zcount nip 
	r> swap >r >r 2dup + dup r> + r> 1+ cmove> mstart + swap move ; 
: lstuff>  dup mend rot - dup>r zcount over	
	4 pick + swap 1+ cmove> r> swap >r over >r swap move r> r> +! ;
: mmap 	inline{  8B 1E 8B 08 67 E3 14 8D 40 03 40 51 53 50 0F B6 
 	 00 FF D3 8D 76 FC 58 5B 59 E2 EF 8D 76 04 AD } ;
: mmap>	inline{  8B 1E 8B 08 67 E3 15 8D 44 08 04 48 51 53 50 0F 
	 B6 00 FF D3 8D 76 FC 58 5B 59 E2 EF 8D 76 04 AD } ;
: >lindex dup>r mstart dup r> msize + over  ;
: >li	swap >r	dup>r >lindex r> r> swap ;	
: >lindex> dup>r mstart dup r> msize +  dup 1- ;
: >li>	swap >r	dup>r >lindex> r> r> swap ;	
: mmapi  >li inline{ 8B 1E 8B 08 67 E3 1C 8D 40 03 67 E3 16 8D 76 04 40 51 
	53 89 06 50 0F B6 00 FF D3 8D 76 FC 58 5B 59 E2 ED 8D 76 0C AD } ;
: mmapi> >li> inline{  8B 1E 8B 08 67 E3 1D 8D 44 08 04 67 E3 16 8D 76 04 48 
	51 53 89 06 50 0F B6 00 FF D3 8D 76 FC 58 5B 59 E2 ED 8D 76 0C AD } ;
: mtouch inline{ 8B 1E 8B 08 67 E3 11 8D 40 03 40 51 53 50 FF D3  
	8D 76 FC 58 5B 59 E2 F2 8D 76 04 AD } ;
: mtouch> inline{  8B 1E 8B 08 67 E3 12 8D 44 08 04 48 51 53 50 FF 
	D3 8D 76 FC 58 5B 59 E2 F2 8D 76 04 AD } ;
: mzipwith ( xt lstr lstr -- )	>r lcount rot r> lcount rot zipwith ;
: mzipwith> ( xt lstr lstr -- )	>r lcount rot r> lcount rot zipwith> ;
: m>zipwith> ( xt lstr lstr -- ) >r lcount rot r> lcount rot >zipwith> ;
: mtouchwith ( xt lstr lstr -- ) >r lcount rot r> lcount rot touchwith ;
: mtouchwith> ( xt lstr lstr -- )	>r lcount rot r> lcount rot touchwith> ;
: m>touchwith> ( xt lstr lstr -- ) >r lcount rot r> lcount rot >touchwith> ;
: mplace>  2dup >r >r  mstart 2dup + >r swap cmove> 0 r> c! r> r> ! ;
: mreverse  lcount reverse ;
: (msize) msize 2 cells + 1+ ; 	
: (mplace)  dup -rot >mstr dup -rot cell+ ! ;	 
: (mplace>)  dup -rot >mstr> dup -rot cell+ ! ;
: >mlink   cell- ;
: mplace  dup>r -rot (mplace) dup>r cell+ toval r> r> swap ! ; 
: mplace>  dup>r -rot (mplace>) dup>r cell+ toval r> r> swap ! ;	
: (resize)  dup (msize) swap >mlink >r over + r> swap resize ; 
: mchop		mcount rot chop ;
: -mchop 	mcount rot -chop ;
: m/char 	mcount rot /char ;
: m\char 	mcount rot \char ;
: m/string 	mcount rot /string ;
: mcmp		mcount rot count cmp ;
: mcmpi 	mcount rot count cmpi ;
: msplit mcount rot split ;
: mrsplit  mcount rot rsplit ;
: msearch  swap mcount rot mcount search ;
: fmsearch  mcount 2swap search ;
: m\string	 lcount rot \string ;
: mdice  	mcount 2swap dice ;
: mun/char mcount rot un/char ;
: mun\char  mcount rot un\char ;
: mcat mcount rot mcount cat ;
defer m-append ' lappend is m-append 
: (mappend) (resize) dup 0 =if ." error in resizing mstr" 3drop drop 
	else dup>r cell+ m-append r> then ;
: mappend   ['] lappend is m-append (mappend) dup @ swap cell+ toval ;
: mprepend  ['] lprepend is m-append (mappend) dup @ swap cell+ toval ;
defer m-fix  ' lsuffix  is m-fix
: (mfix)  1 swap (resize) nip dup 0 =if ." error in resizing mstr" 3drop drop
	else dup>r cell+ m-fix r> then ;
: msuffix  ['] lsuffix is m-fix (mfix) dup @ swap cell+ toval ;
: mprefix ['] lprefix is m-fix (mfix) dup @ swap cell+ toval ;
defer m-insert  ' linsert is m-insert
: (minsert) 1 swap (resize) nip dup 0 =if ." error in resizing mstr" 3drop drop 
	else dup>r cell+ m-insert r> then ;
: minsert    ['] linsert is m-insert (minsert)  dup @ swap cell+ toval ;
: minsert>   ['] linsert> is m-insert (minsert) dup @ swap cell+ toval ;
: n>mstr  (.) rot mplace ;
defer m-take  ' ltake  is m-take
: (mtake) -1 swap (resize)  nip	dup 0 =if ." error in resizing mstr" 3drop drop	
	else dup>r  cell+ m-take r> then ;
: mtake   ['] ltake is m-take (mtake)  dup @ swap cell+ toval  ;
: mtake>  ['] ltake> is m-take (mtake)  dup @ swap cell+ toval  ;
defer m-stuff  ' lstuff  is m-stuff
: (mstuff) 2 pick swap (resize) nip dup 0 =if ." error in resizing mstr" 3drop drop
	else dup>r cell+ m-stuff r> then ;
: mstuff  ['] lstuff is m-stuff (mstuff)  dup @ swap cell+ toval  ;
: mstuff>  ['] lstuff> is m-stuff (mstuff)  dup @ swap cell+ toval  ;
mvalue filtert
: 0filtert filtert ['] filtert <> 0; drop filtert mfree ;
: initfiltert  0filtert " " filtert mplace ;
: (mfilter)  filterfunction if filtert msuffix else drop then ;
: (mfilter>) filterfunction if  filtert mprefix else drop then ;
: [mfilter]  initfiltert nul mcount 
	['] filtert mplace swap is filterfunction ['] (mfilter) swap ;
: [mfilter>] initfiltert nul mcount 
	['] filtert mplace swap is filterfunction ['] (mfilter>) swap ;
: mfilter  [mfilter] mmap filtert ;
: mfilter>   [mfilter] mmap> filtert ;
: mfilteri   [mfilter] mmapi  filtert ;
: mfilteri>   [mfilter] mmapi>  filtert ;

| ================= odds and ends ===========================================

| --- mstring conversion utilities 
: (cstr>mstr)  dup count (mplace) 2dup ! ;
: (lstr>mstr)  dup lcount (mplace) 2dup ! ;
: cstr>mstr  (cstr>mstr) cell+ >value ;
: lstr>mstr  (lstr>mstr) cell+ >value ;

pop~
